# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:57:55+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query
from starlette.requests import Request

from models import (
    ApiClientAllGetResponse,
    ApiEstimationStatusGetResponse,
    ApiGeneralCountriesGetResponse,
    ApiGeneralCurrenciesGetResponse,
    ApiGeneralDateformatsGetResponse,
    ApiGeneralUilanguagesGetResponse,
    ApiInvoiceStatusGetResponse,
    ApiPaymentSupportedGetResponse,
    ApiTaxAllGetResponse,
    ApiWorktypeAllGetResponse,
    ApiWorktypeSearchGetResponse,
    ChangeOrderStatusApiModel,
    ChangeStatusApiModel,
    ClientCreateApiModel,
    ClientDeleteApiModel,
    ClientDetailsApiModel,
    ClientUpdateApiModel,
    EstimationChangeStatusApiModel,
    EstimationCreateApiModel,
    EstimationDeleteApiModel,
    EstimationFullDetailsApiModel,
    EstimationUpdateApiModel,
    EstimationUriApiModel,
    InvoiceCategoryApiModel,
    InvoiceCategoryCreateApiModel,
    InvoiceCategoryDeleteApiModel,
    InvoiceCategoryUpdateApiModel,
    InvoiceCreateApiModel,
    InvoiceDeleteApiModel,
    InvoiceFullDetailsApiModel,
    InvoiceUpdateApiModel,
    InvoiceUriApiModel,
    ListResultEstimationDetailsApiModel,
    ListResultInvoiceCategoryApiModel,
    ListResultInvoiceDetailsApiModel,
    ListResultOrderDetailsApiModel,
    ListResultPaymentLink,
    ListResultProductDetailsApiModel,
    OrderCreateApiModel,
    OrderDeleteApiModel,
    OrderFullDetailsApiModel,
    OrderShippingDetailsApiModel,
    PaymentLink,
    PaymentLinkUriApiModel,
    ProductCreateApiModel,
    ProductDeleteApiModel,
    ProductFullDetailsApiModel,
    ProductUpdateApiModel,
    QueryOptionsOrder,
    SendEstimationToClientApiModel,
    SendInvoiceToAccountantApiModel,
    SendInvoiceToClientApiModel,
    TaxCreateApiModel,
    TaxDeleteApiModel,
    TaxUpdateApiModel,
    WorkTypeCreateApiModel,
    WorkTypeDeleteApiModel,
    WorkTypeDetailsApiModel,
    WorkTypeUpdateApiModel,
)

app = MCPProxy(
    contact={'x-twitter': 'envoicein'},
    description='[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)\r\n<span style=\'margin-left: 0.5em;\'>or</span>\r\n<a href=\'https://documenter.getpostman.com/view/3559821/TVeqcn2L\' class=\'openapi-button\' _ngcontent-c6>View Postman docs</a>\r\n\r\n# Quickstart\r\n\r\nVisit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.\r\n\r\n<div class=\'postman-tutorial\'>\r\n\r\n# Tutorial for running the API in postman\r\n\r\nClick on ""Run in Postman"" button\r\n<br /><br />\r\n![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)\r\n\r\n --- \r\n\r\nA new page will open.\r\nClick the ""Postman for windows"" to run postman as a desktop app.\r\nMake sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.\r\n<br /><br />\r\n![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)\r\n\r\n --- \r\n\r\nIn chrome an alert might show up to set a default app for opening postman links. Click on ""Open Postman"".\r\n<br /><br />\r\n![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)\r\n\r\n --- \r\n\r\nThe OpenAPI specification will be imported in Postman as a new collection named ""Envoice api""\r\n<br /><br />\r\n![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)\r\n\r\n --- \r\n\r\nWhen testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice\'s endpoint so you don\'t really need to change that.  \r\n<sub>\\*Eye button in top right corner </sub>\r\n<br /><br /> \r\n![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)\r\n<br /><br /> \r\n![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)\r\n\r\n --- \r\n\r\nYou don\'t need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.\r\n<br /><br />\r\n![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)\r\n\r\n --- \r\n\r\nModify the example data to suit your needs and send a request.\r\n<br /><br />\r\n![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)\r\n</div>\r\n\r\n# Webhooks\r\n\r\nWebhooks allow you to build or set up Envoice Apps which subscribe to invoice activities. \r\nWhen one of those events is triggered, we\'ll send a HTTP POST payload to the webhook\'s configured URL. \r\nWebhooks can be used to update an external invoice data storage.\r\n\r\nIn order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.\r\nAll nonworking webhooks will be ignored after a certain period of time and several retry attempts.\r\nIf after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.\r\n\r\nThe payload of the webhook is in format:\r\n```\r\n{\r\n    Signature: ""sha256 string"",\r\n    Timestamp: ""YYYY-MM-DDTHH:mm:ss.FFFFFFFZ"",\r\n    Activity: {\r\n        Message: "string",\r\n        Link: "share url",\r\n        Type: int,        \r\n        InvoiceNumber: "string",\r\n        InvoiceId: int,        \r\n        OrderNumber: "string",\r\n        OrderId: int,\r\n        Id: int,\r\n        CreatedOn: "YYYY-MM-DDTHH:mm:ss.FFFFFFFZ"\r\n    }\r\n}\r\n```            ',
    title='API v1.0.0',
    version='v1',
    servers=[{'url': 'https://www.envoice.in'}],
)


@app.get('/api/client/all', tags=['client_data_management'])
def client_api__all(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all clients for the account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/client/candelete', tags=['client_data_management'])
def client_api__can_delete(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Check if the provided client can be deleted
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/client/delete', tags=['client_data_management'])
def client_api__delete(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: ClientDeleteApiModel = ...,
):
    """
    Delete an existing client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/client/details', tags=['client_data_management', 'invoice_processing'])
def client_api__details(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return client details. Activities and invoices included.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/client/new', tags=['client_data_management'])
def client_api__new(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: ClientCreateApiModel = ...,
):
    """
    Create a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/client/update', tags=['client_data_management'])
def client_api__update(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: ClientUpdateApiModel = ...,
):
    """
    Update an existing client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/estimation/all', tags=['estimation_handling'])
def estimation_api__all(
    query_options_page: Optional[int] = Query(None, alias='queryOptions.page'),
    query_options_page_size: Optional[int] = Query(None, alias='queryOptions.pageSize'),
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all estimation for the account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/estimation/changestatus', tags=['estimation_handling'])
def estimation_api__change_status(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: EstimationChangeStatusApiModel = ...,
):
    """
    Change estimation status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/estimation/convert', tags=['estimation_handling', 'invoice_processing'])
def estimation_api__convert(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: int = ...,
):
    """
    Convert the estimation to an invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/estimation/delete', tags=['estimation_handling', 'client_data_management']
)
def estimation_api__delete(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: EstimationDeleteApiModel = ...,
):
    """
    Delete an existing estimation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/estimation/details', tags=['estimation_handling'])
def estimation_api__details(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return estimation data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/estimation/new', tags=['estimation_handling'])
def estimation_api__new(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: EstimationCreateApiModel = ...,
):
    """
    Create an estimation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/estimation/sendtoclient', tags=['estimation_handling'])
def estimation_api__send_to_client(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: SendEstimationToClientApiModel = ...,
):
    """
    Send the provided estimation to the client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/estimation/status', tags=['estimation_handling'])
def estimation_api__status(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Retrieve the status of the estimation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/estimation/update', tags=['estimation_handling'])
def estimation_api__update(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: EstimationUpdateApiModel = ...,
):
    """
    Update an existing estimation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/estimation/uri', tags=['invoice_processing'])
def estimation_api__uri(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return the unique url to the client's invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/general/countries', tags=['system_information_management'])
def general_api__countries(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all of the platform supported countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/general/currencies', tags=['system_information_management'])
def general_api__currencies(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all of the platform supported currencies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/general/dateformats', tags=['system_information_management'])
def general_api__date_formats(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all of the platform supported Date Formats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/general/uilanguages', tags=['system_information_management'])
def general_api__ui_languages(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all of the platform supported UI languages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/invoice/all', tags=['invoice_processing'])
def invoice_api__all(
    query_options_page: Optional[int] = Query(None, alias='queryOptions.page'),
    query_options_page_size: Optional[int] = Query(None, alias='queryOptions.pageSize'),
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all invoices for the account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/invoice/allcategories', tags=['invoice_processing'])
def get_api_invoice_allcategories(
    query: Optional[str] = None,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all invoice categories for the account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/invoice/changestatus', tags=['invoice_processing'])
def invoice_api__change_status(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: ChangeStatusApiModel = ...,
):
    """
    Change invoice status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/invoice/delete', tags=['invoice_processing'])
def invoice_api__delete(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: InvoiceDeleteApiModel = ...,
):
    """
    Delete an existing invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/invoice/deletecategory', tags=['invoice_processing'])
def post_api_invoice_deletecategory(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: InvoiceCategoryDeleteApiModel = ...,
):
    """
    Delete an existing invoice category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/invoice/details', tags=['invoice_processing'])
def invoice_api__details(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return invoice data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/invoice/new', tags=['invoice_processing', 'estimation_handling'])
def invoice_api__new(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: InvoiceCreateApiModel = ...,
):
    """
    Create an invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/invoice/newcategory', tags=['invoice_processing'])
def post_api_invoice_newcategory(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: InvoiceCategoryCreateApiModel = ...,
):
    """
    Create an invoice category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/invoice/pdf', tags=['invoice_processing'])
def invoice_api__pdf(
    id: int,
    signed_version: Optional[bool] = Query(None, alias='signedVersion'),
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return the PDF for the invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/invoice/sendtoaccountant', tags=['invoice_processing'])
def invoice_api__send_to_accountant(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: SendInvoiceToAccountantApiModel = ...,
):
    """
    Send the provided invoice to the accountant
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/invoice/sendtoclient', tags=['invoice_processing'])
def invoice_api__send_to_client(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: SendInvoiceToClientApiModel = ...,
):
    """
    Send the provided invoice to the client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/invoice/status', tags=['invoice_processing'])
def invoice_api__status(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Retrieve the status of the invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/invoice/update', tags=['invoice_processing'])
def invoice_api__update(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: InvoiceUpdateApiModel = ...,
):
    """
    Update an existing invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/invoice/updatecategory', tags=['invoice_processing'])
def post_api_invoice_updatecategory(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: InvoiceCategoryUpdateApiModel = ...,
):
    """
    Update an existing invoice category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/invoice/uri', tags=['invoice_processing'])
def invoice_api__uri(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return the unique url to the client's invoice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/order/all', tags=['order_operations', 'client_data_management'])
def order_api__all(
    query_options_page: Optional[int] = Query(None, alias='queryOptions.page'),
    query_options_page_size: Optional[int] = Query(None, alias='queryOptions.pageSize'),
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all orders for the account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/order/changeshippingdetails', tags=['order_operations'])
def order_api__change_shipping_details(
    order_id: int = Query(..., alias='orderId'),
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: OrderShippingDetailsApiModel = ...,
):
    """
    Change order shipping details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/order/changestatus', tags=['order_operations'])
def order_api__change_status(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: ChangeOrderStatusApiModel = ...,
):
    """
    Change order status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/order/delete', tags=['order_operations'])
def order_api__delete(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: OrderDeleteApiModel = ...,
):
    """
    Delete an existing order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/order/details', tags=['order_operations'])
def order_api__details(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return order details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/order/new', tags=['order_operations'])
def order_api__new(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: OrderCreateApiModel = ...,
):
    """
    Create an order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/payment/supported', tags=['system_information_management'])
def payment_api__supported(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all supported payment gateways (no currencies means all are supported)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/paymentlink/all', tags=['payment_link_operations'])
def payment_link_api__all(
    query_options_page: Optional[int] = Query(None, alias='queryOptions.page'),
    query_options_page_size: Optional[int] = Query(None, alias='queryOptions.pageSize'),
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Create a payment link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/paymentlink/delete', tags=['payment_link_operations'])
def payment_link_api__delete(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: PaymentLink = ...,
):
    """
    Delete an existing payment link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/paymentlink/new', tags=['payment_link_operations'])
def payment_link_api__new(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: PaymentLink = ...,
):
    """
    Create a payment link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/paymentlink/uri', tags=['payment_link_operations'])
def payment_link_api__uri(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return the unique url to the client's payment link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/product/all', tags=['product_catalog_management'])
def product_api__all(
    query_options_page: Optional[int] = Query(None, alias='queryOptions.page'),
    query_options_page_size: Optional[int] = Query(None, alias='queryOptions.pageSize'),
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all products for the account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/product/delete', tags=['product_catalog_management'])
def product_api__delete(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: ProductDeleteApiModel = ...,
):
    """
    Delete an existing product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/product/details', tags=['product_catalog_management'])
def product_api__details(
    id: int,
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return product details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/product/new', tags=['product_catalog_management'])
def product_api__new(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: ProductCreateApiModel = ...,
):
    """
    Create a product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/product/update', tags=['product_catalog_management'])
def product_api__update(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: ProductUpdateApiModel = ...,
):
    """
    Update an existing product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/tax/all', tags=['tax_record_management'])
def tax_api__all(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all taxes for the account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/tax/delete', tags=['tax_record_management'])
def tax_api__delete(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: TaxDeleteApiModel = ...,
):
    """
    Delete an existing tax
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/tax/new', tags=['tax_record_management'])
def tax_api__new(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: TaxCreateApiModel = ...,
):
    """
    Create a tax
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/tax/update', tags=['tax_record_management'])
def tax_api__update(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: TaxUpdateApiModel = ...,
):
    """
    Update an existing tax
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/worktype/all', tags=['work_type_record_management'])
def work_type_api__all(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all work types for the account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/worktype/delete', tags=['work_type_record_management'])
def work_type_api__delete(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: WorkTypeDeleteApiModel = ...,
):
    """
    Delete an existing work type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/worktype/details', tags=['work_type_record_management'])
def work_type_api__details(
    work_type_id: int = Query(..., alias='workTypeId'),
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return work type details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/worktype/new', tags=['work_type_record_management'])
def work_type_api__new(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: WorkTypeCreateApiModel = ...,
):
    """
    Create a work type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/worktype/search', tags=['work_type_record_management'])
def work_type_api__search(
    query_options_query: Optional[str] = Query(None, alias='queryOptions.query'),
    query_options_order_by: Optional[str] = Query(None, alias='queryOptions.orderBy'),
    query_options_order: Optional[QueryOptionsOrder] = Query(
        None, alias='queryOptions.order'
    ),
    query_options_page: Optional[int] = Query(None, alias='queryOptions.page'),
    query_options_page_size: Optional[int] = Query(None, alias='queryOptions.pageSize'),
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
):
    """
    Return all work types for the account that match the query param
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/api/worktype/update', tags=['work_type_record_management'])
def work_type_api__update(
    x_auth_key: str = Header(..., alias='x-auth-key'),
    x_auth_secret: str = Header(..., alias='x-auth-secret'),
    body: WorkTypeUpdateApiModel = ...,
):
    """
    Update an existing work type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
